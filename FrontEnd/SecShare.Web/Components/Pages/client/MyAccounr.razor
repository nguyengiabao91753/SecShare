@page "/myaccount"


<div class="content-wrapper">
    <!-- Content Header (Page header) -->
    <div class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-6">
                    <div class="row file-header">
                        <button type="button" class="btn btn-lg btn-lg-square btn-outline-secondary m-2" onclick="window.location.href='../index.html'">
                            <i class="fa fa-arrow-left"></i>
                        </button>

                        <h1 class="m-0">My Account</h1>
                    </div>
                </div><!-- /.col -->
                <div class="col-sm-6">
                    <ol class="breadcrumb float-sm-right">
                        <li class="breadcrumb-item"><a href="../index.html">Home</a></li>
                        <li class="breadcrumb-item active">My Account</li>
                    </ol>
                </div><!-- /.col -->
            </div><!-- /.row -->
        </div><!-- /.container-fluid -->
    </div>
    <!-- /.content-header -->
    <!-- Main content -->
    <div class="container mt-4">
        <div class="card shadow-sm p-4">
            <!-- Tabs -->
            <ul class="nav nav-tabs custom-tabs" id="accountTabs" role="tablist">
                <li class="nav-item">
                    <a class="nav-link active" id="personal-tab" data-toggle="tab" href="#personal" role="tab">Thông tin cá nhân</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" id="password-tab" data-toggle="tab" href="#password" role="tab">Quản lý mật khẩu</a>
                </li>
            </ul>

            <!--Thông báo cập nhật-->
            <!-- Toast thông báo -->
            <!-- Toast chung -->
            <div class="toast" id="globalToast" role="alert" aria-live="assertive" aria-atomic="true"
                 data-delay="5000"
                 style="position: fixed; top: 9rem; right: 2rem; z-index: 2000; min-width: 280px;">
                <div class="toast-header text-white">
                    <i id="toastIcon" class="mr-2"></i>
                    <strong class="mr-auto" id="toastTitle">Thông báo</strong>
                    <button type="button" class="ml-2 mb-1 close text-white" data-dismiss="toast" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="toast-body" id="toastMessage">
                    <!-- Nội dung sẽ được JS thay -->
                </div>
            </div>

            <!-- Tab content -->
            <div class="tab-content mt-4" id="accountTabsContent">
                <!-- Tab 1: Thông tin cá nhân -->
                <div class="tab-pane fade show active" id="personal" role="tabpanel">
                    <div class="row align-items-start">
                        <!-- Avatar -->
                        <div class="col-md-3 text-center">
                            <div class="position-relative d-inline-block">
                                <div id="avatar"
                                     class="rounded-circle d-flex justify-content-center align-items-center mx-auto shadow"
                                     style="width: 120px; height: 120px; background:#33cbd8; font-size:40px; font-weight:bold; color:#555; overflow:hidden; position:relative; border:4px solid #fff;">
                                    <img id="avatarImg" src="" alt=""
                                         style="width:100%; height:100%; object-fit:cover; display:none;">
                                    <span id="avatarInitial">N</span>
                                    <!-- Nút chọn ảnh -->
                                    <label for="avatarInput" class="btn btn-light btn-sm position-absolute shadow-sm"
                                           style="bottom:0; right:0; border-radius:50%; padding:6px; cursor:pointer;">
                                        <i class="fa fa-camera"></i>
                                    </label>
                                    <input type="file" id="avatarInput" accept="image/*" style="display:none;">
                                </div>
                            </div>
                            <h5 class="mt-3 font-weight-bold" id="username">Nguyễn Phúc</h5>
                        </div>

                        <!-- Info -->
                        <div class="col-md-9">
                            <div class="info-item d-flex justify-content-between align-items-center">
                                <div>
                                    <span class="info-label">Tên người dùng:</span>
                                    <span id="field-name" class="info-value">Nguyễn Phúc</span>
                                </div>
                                <button class="btn btn-light btn-sm btn-edit" data-field="name"><i class="fa fa-pen"></i></button>
                            </div>

                            <div class="info-item d-flex justify-content-between align-items-center">
                                <div>
                                    <span class="info-label">Ngày sinh:</span>
                                    <span id="field-dob" class="info-value">2004-04-07</span>
                                </div>
                                <button class="btn btn-light btn-sm btn-edit" data-field="dob"><i class="fa fa-pen"></i></button>
                            </div>

                            <div class="info-item d-flex justify-content-between align-items-center">
                                <div>
                                    <span class="info-label">Giới tính:</span>
                                    <span id="field-gender" class="info-value">Nam</span>
                                </div>
                                <button class="btn btn-light btn-sm btn-edit" data-field="gender"><i class="fa fa-pen"></i></button>
                            </div>

                            <div class="info-item d-flex justify-content-between align-items-center">
                                <div>
                                    <span class="info-label">Email:</span>
                                    <span id="field-email" class="info-value">phuc@example.com</span>
                                </div>
                                <button class="btn btn-light btn-sm" disabled><i class="fa fa-lock"></i></button>
                            </div>

                            <div class="info-item d-flex justify-content-between align-items-center">
                                <div>
                                    <span class="info-label">Điện thoại:</span>
                                    <span id="field-phone" class="info-value">+84 903 645 975</span>
                                </div>
                                <button class="btn btn-light btn-sm btn-edit" data-field="phone"><i class="fa fa-pen"></i></button>
                            </div>

                            <div class="info-item d-flex justify-content-between align-items-center">
                                <div>
                                    <span class="info-label">Địa chỉ:</span>
                                    <span id="field-address" class="info-value">Hà Nội, Việt Nam</span>
                                </div>
                                <button class="btn btn-light btn-sm btn-edit" data-field="address"><i class="fa fa-pen"></i></button>
                            </div>

                            <!-- Save / Cancel -->
                            <div id="actionButtons" class="text-right mt-3 d-none">
                                <button id="cancelBtn" class="btn btn-outline-secondary mr-2 px-4 rounded">Hủy</button>
                                <button id="saveBtn" class="btn btn-success px-4 rounded">Lưu</button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Tab 2: Quản lý mật khẩu -->
                <div class="tab-pane fade" id="password" role="tabpanel">
                    <div class="form-group">
                        <label for="currentPassword">Mật khẩu hiện tại</label>
                        <input type="password" class="form-control" id="currentPassword" placeholder="Nhập mật khẩu hiện tại">
                    </div>
                    <div class="form-group">
                        <label for="newPassword">Mật khẩu mới</label>
                        <input type="password" class="form-control" id="newPassword" placeholder="Nhập mật khẩu mới">
                    </div>
                    <div class="form-group">
                        <label for="confirmPassword">Xác nhận mật khẩu</label>
                        <input type="password" class="form-control" id="confirmPassword" placeholder="Nhập lại mật khẩu mới">
                    </div>
                    <div class="text-right mt-3">
                        <button id="cancelPasswordBtn" class="btn btn-outline-secondary mr-2 px-4 rounded">Hủy</button>
                        <button id="savePasswordBtn" class="btn btn-success px-4 rounded">Lưu</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--Js cho toàn bộ content-->
    <script>
        document.addEventListener("DOMContentLoaded", () => {
          const email = "phuc@example.com";
          const avatarImg = document.getElementById("avatarImg");
          const avatarInitial = document.getElementById("avatarInitial");
          const avatarInput = document.getElementById("avatarInput");
          const actionButtons = document.getElementById("actionButtons");
          const saveBtn = document.getElementById("saveBtn");
          const cancelBtn = document.getElementById("cancelBtn");
          const editBtns = document.querySelectorAll(".btn-edit");

          // Avatar gốc
          let originalAvatar = { type: "initial", value: email.charAt(0).toUpperCase() };
          let tempAvatar = null;

          function renderAvatar(data) {
            if (!data) return;
            if (data.type === "image") {
              avatarImg.src = data.value;
              avatarImg.style.display = "block";
              avatarInitial.style.display = "none";
            } else {
              avatarInitial.textContent = data.value;
              avatarInitial.style.display = "flex";
              avatarImg.style.display = "none";
            }
          }
          renderAvatar(originalAvatar);

          // Preview avatar khi chọn ảnh
          avatarInput.addEventListener("change", (e) => {
            const file = e.target.files[0];
            if (!file) return;
            const reader = new FileReader();
            reader.onload = function (event) {
              tempAvatar = { type: "image", value: event.target.result };
              renderAvatar(tempAvatar);
              actionButtons.classList.remove("d-none");
            };
            reader.readAsDataURL(file);
          });

          // State edit
          let editingFields = {};
          let phoneInstance = null;
          let phoneWrapperId = null;

          function createTextInput(value, type = "text") {
            const input = document.createElement("input");
            input.type = type;
            input.value = value || "";
            input.className = "form-control form-control-sm d-inline-block";
            input.style.width = "auto";
            return input;
          }

          // Nút edit từng field
          editBtns.forEach(btn => {
            btn.addEventListener("click", () => {
              const field = btn.dataset.field;
              const span = document.getElementById(`field-${field}`);
              if (!span) return;

              const tag = span.tagName.toLowerCase();
              if (tag === "input" || tag === "select" || span.classList.contains("editing")) return;

              editingFields[field] = span.textContent.trim();

              let inputElem, wrapper;
              if (field === "dob") {
                inputElem = createTextInput(editingFields[field], "date");
              } else if (field === "gender") {
                inputElem = document.createElement("select");
                inputElem.className = "form-control form-control-sm d-inline-block";
                ["Nam", "Nữ", "Khác"].forEach(opt => {
                  const o = document.createElement("option");
                  o.value = opt;
                  o.textContent = opt;
                  if (editingFields[field] === opt) o.selected = true;
                  inputElem.appendChild(o);
                });
              } else if (field === "password") {
                inputElem = createTextInput("", "password");
                inputElem.placeholder = "Nhập mật khẩu mới";
              } else if (field === "phone") {
                wrapper = document.createElement("div");
                wrapper.className = "phone-edit-wrapper";
                phoneWrapperId = `phone-wrap-${Date.now()}`;
                wrapper.id = phoneWrapperId;

                inputElem = createTextInput(editingFields[field], "tel");
                inputElem.id = `phoneInput-${Date.now()}`;
                inputElem.style.minWidth = "200px";
                wrapper.appendChild(inputElem);

                span.replaceWith(wrapper);

                setTimeout(() => {
                  if (phoneInstance && phoneInstance.destroy) {
                    phoneInstance.destroy();
                    phoneInstance = null;
                  }
                  phoneInstance = window.intlTelInput(inputElem, {
                    initialCountry: "vn",
                    separateDialCode: false,
                    utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.19/js/utils.js"
                  });
                  try {
                    if (editingFields[field]) phoneInstance.setNumber(editingFields[field]);
                  } catch (e) {}
                  inputElem.focus();
                }, 0);

                actionButtons.classList.remove("d-none");
                return;
              } else {
                inputElem = createTextInput(editingFields[field], "text");
              }

              inputElem.id = `field-${field}`;
              span.replaceWith(inputElem);
              inputElem.focus();
              actionButtons.classList.remove("d-none");
            });
          });

          // Save / Cancel ở tab Thông tin cá nhân
          if (saveBtn) {
            saveBtn.addEventListener("click", () => {
              for (let field in editingFields) {
                if (field === "phone") {
                  const wrapper = document.getElementById(phoneWrapperId);
                  if (phoneInstance && wrapper) {
                    try {
                      let fullNumber = phoneInstance.getNumber();
                      let display = fullNumber;
                      if (window.intlTelInputUtils && typeof window.intlTelInputUtils.formatNumber === "function") {
                        try {
                          display = phoneInstance.getNumber(window.intlTelInputUtils.numberFormat.INTERNATIONAL) || fullNumber;
                        } catch (e) {}
                      }
                      phoneInstance.destroy();
                      phoneInstance = null;
                      phoneWrapperId = null;
                      const span = document.createElement("span");
                      span.id = `field-phone`;
                      span.className = "field-text";
                      span.textContent = display || fullNumber || editingFields[field];
                      span.dataset.phone = fullNumber || "";
                      wrapper.replaceWith(span);
                    } catch (err) {
                      const span = document.createElement("span");
                      span.id = `field-phone`;
                      span.className = "field-text";
                      span.textContent = editingFields[field];
                      if (wrapper) wrapper.replaceWith(span);
                      phoneInstance = null;
                      phoneWrapperId = null;
                    }
                  }
                  continue;
                }

                const input = document.getElementById(`field-${field}`);
                if (!input) continue;
                const newSpan = document.createElement("span");
                newSpan.id = `field-${field}`;
                newSpan.className = "field-text";
                newSpan.textContent = input.value || editingFields[field];
                input.replaceWith(newSpan);
              }

              if (tempAvatar) {
                originalAvatar = tempAvatar;
                tempAvatar = null;
                if (avatarInput) avatarInput.value = "";
              }

              editingFields = {};
              actionButtons.classList.add("d-none");
              showToast("success", "Cập nhật thông tin cá nhân thành công!");
            });
          }

          if (cancelBtn) {
            cancelBtn.addEventListener("click", () => {
              for (let field in editingFields) {
                if (field === "phone") {
                  const wrapper = document.getElementById(phoneWrapperId);
                  if (phoneInstance) {
                    phoneInstance.destroy();
                    phoneInstance = null;
                  }
                  const span = document.createElement("span");
                  span.id = `field-phone`;
                  span.className = "field-text";
                  span.textContent = editingFields[field];
                  if (wrapper) wrapper.replaceWith(span);
                  phoneWrapperId = null;
                  continue;
                }
                const input = document.getElementById(`field-${field}`);
                if (!input) continue;
                const span = document.createElement("span");
                span.id = `field-${field}`;
                span.className = "field-text";
                span.textContent = editingFields[field];
                input.replaceWith(span);
              }

              if (tempAvatar) {
                renderAvatar(originalAvatar);
                tempAvatar = null;
                if (avatarInput) avatarInput.value = "";
              }

              editingFields = {};
              actionButtons.classList.add("d-none");
            });
          }

          // Toast function
          function showToast(type, message) {
            const toastEl = document.getElementById("globalToast");
            const header = toastEl.querySelector(".toast-header");
            const icon = document.getElementById("toastIcon");
            const msg = document.getElementById("toastMessage");

            header.className = "toast-header text-white";
            icon.className = "mr-2";

            if (type === "success") {
              header.classList.add("bg-success");
              icon.classList.add("fas", "fa-check-circle");
            } else if (type === "error") {
              header.classList.add("bg-danger");
              icon.classList.add("fas", "fa-times-circle");
            } else {
              header.classList.add("bg-info");
              icon.classList.add("fas", "fa-info-circle");
            }

            msg.textContent = message;
            $('#globalToast').toast('show');
          }

          // Save ở tab "Đổi mật khẩu"
          const savePasswordBtn = document.getElementById("savePasswordBtn");
          if (savePasswordBtn) {
            savePasswordBtn.addEventListener("click", () => {
              const current = document.getElementById("currentPassword");
              const newPass = document.getElementById("newPassword");
              const confirm = document.getElementById("confirmPassword");

              if (!current.value.trim() || !newPass.value.trim() || !confirm.value.trim()) {
                showToast("error", "Vui lòng nhập đầy đủ thông tin!");
                return;
              }
              if (newPass.value.trim() !== confirm.value.trim()) {
                showToast("error", "Mật khẩu xác nhận không khớp!");
                return;
              }

              showToast("success", "Đổi mật khẩu thành công!");
              $('#globalToast').on('hidden.bs.toast', function () {
                current.value = "";
                newPass.value = "";
                confirm.value = "";
                $(this).off('hidden.bs.toast');
              });
            });
          }

          //Cancel ở tab đổi mật khẩu
          const cancelPasswordBtn = document.getElementById("cancelPasswordBtn");
          if (cancelPasswordBtn) {
            cancelPasswordBtn.addEventListener("click", ()=>{
            document.getElementById("currentPassword").value = "";
            document.getElementById("newPassword") .value= "";
            document.getElementById("confirmPassword").value = "";
          })
          }

          // Ẩn nút Save/Cancel ban đầu
          document.getElementById("actionButtons").classList.add("d-none");
        });
    </script>
    <!-- /.content -->

</div>